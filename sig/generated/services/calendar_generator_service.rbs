# Generated from app/services/calendar_generator_service.rb with RBS::Inline

# The CalendarGeneratorService generates a calendar structure for a property's bookings
# organized by weeks and days for a specified year.
#
# This service:
# * Fetches all bookings for a property within the specified year
# * Groups them by date
# * Constructs a weekly calendar structure with associated bookings
#
# @example
#   calendar = CalendarGeneratorService.new(property: my_property, year: 2023).call
#   calendar.each do |week|
#     puts "Week starting: #{week[:start_date]}"
#     week[:days].each do |date, bookings|
#       puts "  #{date}: #{bookings.count} bookings"
#     end
#   end
class CalendarGeneratorService
  # @rbs property: Property
  # @rbs year: Integer
  def initialize: (property: Property, ?year: Integer) -> untyped

  # Generate and return the calendar structure
  #
  # @rbs return: Array[{ start_date: Date, days: Array[[Date, Array[Booking]]] }]
  def call: () -> Array[{ start_date: Date, days: Array[[ Date, Array[Booking] ]] }]

  private

  attr_reader property: Property

  attr_reader year: Integer

  # Generate a weekly calendar structure with bookings
  #
  # @rbs bookings: Hash[Date, Array[Booking]]
  # @rbs return: Array[{ start_date: Date, days: Array[[Date, Array[Booking]]] }]
  def generate_weeks: (Hash[Date, Array[Booking]] bookings) -> Array[{ start_date: Date, days: Array[[ Date, Array[Booking] ]] }]

  # Build a single week structure with its days and associated bookings
  #
  # @rbs week_start_date: Date
  # @rbs bookings_by_date: Hash[Date, Array[Booking]]
  # @rbs return: { start_date: Date, days: Array[[Date, Array[Booking]]] }
  def build_week: (Date week_start_date, Hash[Date, Array[Booking]] bookings_by_date) -> { start_date: Date, days: Array[[ Date, Array[Booking] ]] }

  # Group bookings by date
  # For each booking, map it to all days it spans, then group by date
  #
  # @rbs return: Hash[Date, Array[Booking]]
  def group_bookings: () -> Hash[Date, Array[Booking]]

  # Fetch all bookings for the property within the year's date range
  #
  # @rbs return: Array[Booking]
  def property_bookings: () -> Array[Booking]
end
