class Booking < ::ApplicationRecord
  extend ::_ActiveRecord_Relation_ClassMethods[::Booking, ::Booking::ActiveRecord_Relation, ::Integer]

  module GeneratedAttributeMethods
    def id: () -> ::Integer

    def id=: (::Integer) -> ::Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ ::Integer?, ::Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> ::Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> ::Array[::Integer?]?

    def id_previously_was: () -> ::Integer?

    def id_before_last_save: () -> ::Integer?

    def id_change_to_be_saved: () -> ::Array[::Integer?]?

    def id_in_database: () -> ::Integer?

    def saved_change_to_id: () -> ::Array[::Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def room_id: () -> ::Integer

    def room_id=: (::Integer) -> ::Integer

    def room_id?: () -> bool

    def room_id_changed?: () -> bool

    def room_id_change: () -> [ ::Integer?, ::Integer? ]

    def room_id_will_change!: () -> void

    def room_id_was: () -> ::Integer?

    def room_id_previously_changed?: () -> bool

    def room_id_previous_change: () -> ::Array[::Integer?]?

    def room_id_previously_was: () -> ::Integer?

    def room_id_before_last_save: () -> ::Integer?

    def room_id_change_to_be_saved: () -> ::Array[::Integer?]?

    def room_id_in_database: () -> ::Integer?

    def saved_change_to_room_id: () -> ::Array[::Integer?]?

    def saved_change_to_room_id?: () -> bool

    def will_save_change_to_room_id?: () -> bool

    def restore_room_id!: () -> void

    def clear_room_id_change: () -> void

    def adults: () -> ::Integer?

    def adults=: (::Integer?) -> ::Integer?

    def adults?: () -> bool

    def adults_changed?: () -> bool

    def adults_change: () -> [ ::Integer?, ::Integer? ]

    def adults_will_change!: () -> void

    def adults_was: () -> ::Integer?

    def adults_previously_changed?: () -> bool

    def adults_previous_change: () -> ::Array[::Integer?]?

    def adults_previously_was: () -> ::Integer?

    def adults_before_last_save: () -> ::Integer?

    def adults_change_to_be_saved: () -> ::Array[::Integer?]?

    def adults_in_database: () -> ::Integer?

    def saved_change_to_adults: () -> ::Array[::Integer?]?

    def saved_change_to_adults?: () -> bool

    def will_save_change_to_adults?: () -> bool

    def restore_adults!: () -> void

    def clear_adults_change: () -> void

    def children: () -> ::Integer?

    def children=: (::Integer?) -> ::Integer?

    def children?: () -> bool

    def children_changed?: () -> bool

    def children_change: () -> [ ::Integer?, ::Integer? ]

    def children_will_change!: () -> void

    def children_was: () -> ::Integer?

    def children_previously_changed?: () -> bool

    def children_previous_change: () -> ::Array[::Integer?]?

    def children_previously_was: () -> ::Integer?

    def children_before_last_save: () -> ::Integer?

    def children_change_to_be_saved: () -> ::Array[::Integer?]?

    def children_in_database: () -> ::Integer?

    def saved_change_to_children: () -> ::Array[::Integer?]?

    def saved_change_to_children?: () -> bool

    def will_save_change_to_children?: () -> bool

    def restore_children!: () -> void

    def clear_children_change: () -> void

    def notes: () -> ::String?

    def notes=: (::String?) -> ::String?

    def notes?: () -> bool

    def notes_changed?: () -> bool

    def notes_change: () -> [ ::String?, ::String? ]

    def notes_will_change!: () -> void

    def notes_was: () -> ::String?

    def notes_previously_changed?: () -> bool

    def notes_previous_change: () -> ::Array[::String?]?

    def notes_previously_was: () -> ::String?

    def notes_before_last_save: () -> ::String?

    def notes_change_to_be_saved: () -> ::Array[::String?]?

    def notes_in_database: () -> ::String?

    def saved_change_to_notes: () -> ::Array[::String?]?

    def saved_change_to_notes?: () -> bool

    def will_save_change_to_notes?: () -> bool

    def restore_notes!: () -> void

    def clear_notes_change: () -> void

    def deposit: () -> ::BigDecimal?

    def deposit=: (::BigDecimal?) -> ::BigDecimal?

    def deposit?: () -> bool

    def deposit_changed?: () -> bool

    def deposit_change: () -> [ ::BigDecimal?, ::BigDecimal? ]

    def deposit_will_change!: () -> void

    def deposit_was: () -> ::BigDecimal?

    def deposit_previously_changed?: () -> bool

    def deposit_previous_change: () -> ::Array[::BigDecimal?]?

    def deposit_previously_was: () -> ::BigDecimal?

    def deposit_before_last_save: () -> ::BigDecimal?

    def deposit_change_to_be_saved: () -> ::Array[::BigDecimal?]?

    def deposit_in_database: () -> ::BigDecimal?

    def saved_change_to_deposit: () -> ::Array[::BigDecimal?]?

    def saved_change_to_deposit?: () -> bool

    def will_save_change_to_deposit?: () -> bool

    def restore_deposit!: () -> void

    def clear_deposit_change: () -> void

    def cancelled_at: () -> ::ActiveSupport::TimeWithZone?

    def cancelled_at=: (::ActiveSupport::TimeWithZone?) -> ::ActiveSupport::TimeWithZone?

    def cancelled_at?: () -> bool

    def cancelled_at_changed?: () -> bool

    def cancelled_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def cancelled_at_will_change!: () -> void

    def cancelled_at_was: () -> ::ActiveSupport::TimeWithZone?

    def cancelled_at_previously_changed?: () -> bool

    def cancelled_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def cancelled_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def cancelled_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def cancelled_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def cancelled_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_cancelled_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_cancelled_at?: () -> bool

    def will_save_change_to_cancelled_at?: () -> bool

    def restore_cancelled_at!: () -> void

    def clear_cancelled_at_change: () -> void

    def starts_at: () -> ::ActiveSupport::TimeWithZone?

    def starts_at=: (::ActiveSupport::TimeWithZone?) -> ::ActiveSupport::TimeWithZone?

    def starts_at?: () -> bool

    def starts_at_changed?: () -> bool

    def starts_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def starts_at_will_change!: () -> void

    def starts_at_was: () -> ::ActiveSupport::TimeWithZone?

    def starts_at_previously_changed?: () -> bool

    def starts_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def starts_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def starts_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def starts_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def starts_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_starts_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_starts_at?: () -> bool

    def will_save_change_to_starts_at?: () -> bool

    def restore_starts_at!: () -> void

    def clear_starts_at_change: () -> void

    def ends_at: () -> ::ActiveSupport::TimeWithZone?

    def ends_at=: (::ActiveSupport::TimeWithZone?) -> ::ActiveSupport::TimeWithZone?

    def ends_at?: () -> bool

    def ends_at_changed?: () -> bool

    def ends_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def ends_at_will_change!: () -> void

    def ends_at_was: () -> ::ActiveSupport::TimeWithZone?

    def ends_at_previously_changed?: () -> bool

    def ends_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def ends_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def ends_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def ends_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def ends_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_ends_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_ends_at?: () -> bool

    def will_save_change_to_ends_at?: () -> bool

    def restore_ends_at!: () -> void

    def clear_ends_at_change: () -> void

    def created_at: () -> ::ActiveSupport::TimeWithZone

    def created_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ::ActiveSupport::TimeWithZone

    def updated_at=: (::ActiveSupport::TimeWithZone) -> ::ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ::ActiveSupport::TimeWithZone?, ::ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ::ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ::ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> ::Array[::ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods

  def room: () -> ::Room
  def room=: (::Room?) -> ::Room?
  def reload_room: () -> ::Room?
  def build_room: (untyped) -> ::Room
  def create_room: (untyped) -> ::Room
  def create_room!: (untyped) -> ::Room

  def self.upcoming: () -> ::Booking::ActiveRecord_Relation
  def self.past: () -> ::Booking::ActiveRecord_Relation
  def self.current: () -> ::Booking::ActiveRecord_Relation
  def self.for_day: (untyped day) -> ::Booking::ActiveRecord_Relation

  module GeneratedRelationMethods
    def upcoming: () -> ::Booking::ActiveRecord_Relation

    def past: () -> ::Booking::ActiveRecord_Relation

    def current: () -> ::Booking::ActiveRecord_Relation

    def for_day: (untyped day) -> ::Booking::ActiveRecord_Relation
  end

  # Dependencies needed for the methods
  attr_reader property: Property?
  attr_reader starts_at: DateTime
  attr_reader ends_at: DateTime
  attr_reader room_id: Integer?
  attr_reader id: Integer?

  # Method to validate that ends_at is after starts_at
  def ends_at_after_starts_at: () -> (nil | untyped)

  # Method to validate no overlapping bookings
  def no_overlapping_bookings: () -> (nil | untyped)

  # Error handling
  def errors: () -> ActiveModel::Errors

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include ::Booking::GeneratedRelationMethods
    include ::_ActiveRecord_Relation[::Booking, ::Integer]
    include ::Enumerable[::Booking]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include ::Booking::GeneratedRelationMethods
    include ::_ActiveRecord_Relation[::Booking, ::Integer]
  end
end
